type Query {
  users: [User!]!
  events: [Event!]!
  clients: [Client!]!
  clientsWithTotalHours: [ClienttWithTotalHours!]!
}

type User {
  id: ID!
  email: String!
  password: String!
}

type Client {
  id: ID!
  userId: String!
  name: String!
  rate: String
  currency: String!
  themeColor: String
}

type ClienttWithTotalHours {
  id: ID!
  userId: String!
  name: String!
  rate: String
  currency: String!
  themeColor: String
  totalHours: Int
  totalBilled: Int
}

type Event {
  id: ID!
  userId: ID!
  clientId: ID!
  description: String!
  hours: Float!
  date: String!
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  clientCreate(
    name: String!
    rate: String
    currency: String!
    themeColor: String
  ): Client
  eventCreate(
    clientId: ID
    description: String!
    hours: Float!
    date: String!
  ): Event
}

type AuthPayload {
  token: String
  user: User
  error: ErrorPayload
}

type ErrorPayload {
  message: String
}
